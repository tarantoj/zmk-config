/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    flavor = "tap-preferred";
    quick-tap-ms = <175>;
};

&lt { quick-tap-ms = <175>; };

&sk { quick-release; };

/ {
    behaviors {
        smart_shift: smart_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk RIGHT_SHIFT>, <&caps_word>, <&kt RIGHT_SHIFT>;
        };
    };

    combos {
        compatible = "zmk,combos";

        toggle_gaming {
            bindings = <&tog 5>;
            key-positions = <37 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB       &kp Q           &kp W           &kp E             &kp R         &kp T        &kp Y    &kp U            &kp I         &kp O            &kp P               &kp BSPC
&kp LCTRL     &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LEFT_SHIFT D  &mt LCTRL F   &kp G        &kp H    &mt RCTRL J      &mt RSHIFT K  &mt RIGHT_ALT L  &mt RIGHT_GUI SEMI  &kp SQT
&kp LEFT_ALT  &kp Z           &kp X           &kp C             &kp V         &kp B        &kp N    &kp M            &kp COMMA     &kp DOT          &kp FSLH            &kp ESC
                                              &kp LGUI          &lt 3 ESCAPE  &kp SPACE    &kp RET  &lt 4 BACKSPACE  &smart_shift
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT   &trans        &trans        &trans        &trans        &trans          &trans    &trans    &trans    &trans     &trans  &trans
                                        &kp LGUI      &trans        &kp SPACE       &kp RET   &trans    &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        numberpad {
            bindings = <
&out OUT_TOG  &out OUT_USB  &out OUT_BLE  &trans        &trans        &trans          &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp UNDER   &kp PLUS   &trans
&bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS   &kp EQUAL  &kp ASTERISK
&trans        &trans        &trans        &trans        &trans        &trans          &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD  &kp SLASH  &trans
                                          &trans        &trans        &trans          &trans        &trans        &kp NUMBER_0
            >;
        };

        symbols {
            bindings = <
&kp TILDE  &kp EXCLAMATION  &kp AMPERSAND  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE         &kp HOME          &kp PAGE_DOWN  &kp PAGE_UP   &kp END            &kp INSERT         &kp DELETE
&kp GRAVE  &kp AT_SIGN      &kp HASH       &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BACKSLASH    &kp LEFT          &kp DOWN       &kp UP_ARROW  &kp RIGHT          &kp K_APPLICATION  &trans
&trans     &kp DOLLAR       &kp PERCENT    &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp CARET        &kp C_PLAY_PAUSE  &kp C_PREV     &kp C_NEXT    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP    &trans
                                           &kp LESS_THAN         &kp GREATER_THAN       &trans           &trans            &trans         &trans
            >;
        };

        gaming {
            bindings = <
&kp TAB           &kp T  &kp Q  &kp W         &kp E   &kp R        &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_CONTROL  &kp G  &kp A  &kp S         &kp D   &kp F        &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT    &kp B  &kp X  &kp C         &kp V   &kp V        &trans  &trans  &trans  &trans  &trans  &trans
                                &kp LEFT_ALT  &trans  &kp SPACE    &trans  &trans  &trans
            >;
        };
    };
};
